#!/bin/bash

# Kubernetes Cluster Initialization Script
# Autor: Kleber Santos de Carvalho / Reimon Ferreira
# Data: 13-06-2024
# Versão: 1.0

Echo "Este script configura um cluster Kubernetes usando kubeadm, containerd como runtime e configura a rede."

echo " Update e upgrade dos pacotes do sistema"
sudo apt-get update -y
sudo apt-get upgrade -y

echo "* libraries/restart-without-asking boolean true" | sudo debconf-set-selections


# Carregar módulos do kernel necessários para Kubernetes e containerd
echo "Carregando os módulos do kernel necessários: overlay e br_netfilter"
cat << EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter


# Configurar parâmetros sysctl necessários para Kubernetes
echo "Configurando parâmetros sysctl necessários para Kubernetes"
cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

echo "Aplicando configurações sysctl"
sudo sysctl --system

# Instalar containerd
echo "Atualizando os pacotes do sistema e instalando containerd"
sudo apt-get update && sudo apt-get install -y containerd

echo "Criando diretório de configuração para containerd"
sudo mkdir -p /etc/containerd

echo "Gerando arquivo de configuração padrão para containerd"

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

echo "Modificar Configuração para Usar Systemd como Gerenciador de Cgroups"
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

echo "substituir registry.k8s.io/pause:3.8 por registry.k8s.io/pause:3.9"
sudo sed -i 's|registry.k8s.io/pause:3.8|registry.k8s.io/pause:3.9|g' /etc/containerd/config.toml
ß
echo "Reiniciando serviço containerd"
sudo systemctl restart containerd

# Desativar swap
echo "Desativando swap"
sudo swapoff -a

# Instalar dependências do Kubernetes
echo "Instalando dependências do Kubernetes"
sudo apt-get update && sudo apt-get install -y apt-transport-https curl

echo "Adicionando chave de assinatura do repositório do Kubernetes"
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "Criando diretório de keyrings para o Kubernetes"
sudo mkdir /etc/apt/keyrings

echo "Baixando e adicionando keyring do repositório do Kubernetes"
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "Adicionando repositório do Kubernetes ao sources list"
sudo echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

echo "Atualizando lista de pacotes e instalando kubeadm, kubelet e kubectl"
sudo apt-get update
sudo apt install -y kubeadm=1.28.1-1.1 kubelet=1.28.1-1.1 kubectl=1.28.1-1.1

echo "Marcando kubeadm, kubelet e kubectl para não serem atualizados automaticamente"
sudo apt-mark hold kubelet kubeadm kubectl

# Inicializar cluster Kubernetes
echo "Inicializando o cluster Kubernetes com kubeadm"
sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.28.1

echo "Iniciando a criação do diretório .kube no diretório home do usuário"
sudo mkdir -p $HOME/.kube

echo "Copiando o arquivo de configuração do Kubernetes para o diretório .kube"
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

echo "Alterando a propriedade do arquivo de configuração do Kubernetes para o usuário atual"
sudo chown $(id -u):$(id -g) $HOME/.kube/config

echo "Lista todos os nodes do nosso cluster Kubernetes"
kubectl get nodes
echo "Lista todos os pods com detalhes no namespace kube-system"
sleep 30
echo "Aguarde 30 segundos"
kubectl get pods -n kube-system

echo "Instalando o Calico para a rede do cluster"
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
echo ".-. .-')             .-. .-')    ('-.  _  .-')       .-') _   ('-.   .-') _     ('-.    .-')    ";
echo "\  ( OO )            \  ( OO ) _(  OO)( \( -O )     ( OO ) )_(  OO) (  OO) )  _(  OO)  ( OO ).  ";
echo ",--. ,--. ,--. ,--.   ;-----.\(,------.,------. ,--./ ,--,'(,------./     '._(,------.(_)---\_) ";
echo "|  .'   / |  | |  |   | .-.  | |  .---'|   /\`. '|   \ |  |\ |  .---'|'--...__)|  .---'/    _ |  ";
echo "|      /, |  | | .-') | '-' /_)|  |    |  /  | ||    \|  | )|  |    '--.  .--'|  |    \  :\` \`.  ";
echo "|     ' _)|  |_|( OO )| .-. \`.(|  '--. |  |_.' ||  .     |/(|  '--.    |  |  (|  '--.  '..\`''.) ";
echo "|  .   \  |  | | \`-' /| |  \  ||  .--' |  .  '.'|  |\    |  |  .--'    |  |   |  .--' .-._)   \ ";
echo "|  |\   \('  '-'(_.-' | '--'  /|  \`---.|  |\  \ |  | \   |  |  \`---.   |  |   |  \`---.\       / ";
echo "\`--' '--'  \`-----'    \`------' \`------'\`--' '--'\`--'  \`--'  \`------'   \`--'   \`------' \`-----'  ";

echo "Aguarde 3 segundos"
sleep 3
kubectl get pods -n kube-system
sleep 3
kubectl get all --all-namespaces
sleep 3
kubectl get nodes -o wide
sleep 2
kubectl describe nodes
sleep 2
kubectl get pods -A


echo "Script concluído. O cluster Kubernetes foi inicializado com sucesso."
